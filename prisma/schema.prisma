// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 Int           @id @default(autoincrement())
  name               String?
  email              String?       @unique
  emailVerified      DateTime? // Field for storing the verification date
  image              String? // Field for storing the profile image URL
  refreshToken       String?
  password           String?
  roleId             Int           @default(1)
  gender             String?
  verificationStatus Boolean       @default(false)
  profilePic         String?
  accessToken        String?
  Participant        Participant[]
  accounts           Account[]
  sessions           Session[]
  FeedBack           FeedBack?
}

model Event {
  id          Int           @id @default(autoincrement())
  eventName   String
  eventPoster String
  dateTime    DateTime
  venue       String
  about       String
  isOnline    Boolean       @default(false)
  prize       String?
  entryFee    Decimal?
  team        Boolean       @default(false)
  Participant Participant[]
  committeeId Int           @default(1)
  committee   Committee?    @relation(fields: [committeeId], references: [id], onDelete: Cascade)
}

model Participant {
  id               Int      @id @default(autoincrement())
  userId           Int
  eventId          Int
  registrationDate DateTime
  teamCode         String?
  hasAttended      Boolean  @default(false)
  qrCodeToken      String   @unique
  event            Event    @relation(fields: [eventId], references: [id])
  user             User     @relation(fields: [userId], references: [id])
}

model Account {
  id                String  @id @default(cuid())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       Int
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@id([identifier, token])
}

model FeedBack {
  id      Int     @id @default(autoincrement())
  userId  Int     @unique
  status  Boolean @default(false)
  rating  Int
  comment String
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Committee {
  id            Int                     @id @default(autoincrement())
  committeeName String
  description   String
  committeeLogo String?
  nickName      String                  @unique
  socialHandles CommitteeSocialHandle[]
  pubs          Publicity[]
  events        Event[]
}

model CommitteeSocialHandle {
  id          Int       @id @default(autoincrement())
  committeeId Int
  platform    String
  handle      String
  committee   Committee @relation(fields: [committeeId], references: [id], onDelete: Cascade)
}

model Publicity {
  id          Int       @id @default(autoincrement())
  committeeId Int
  name        String
  contact     String
  committee   Committee @relation(fields: [committeeId], references: [id], onDelete: Cascade)
}
